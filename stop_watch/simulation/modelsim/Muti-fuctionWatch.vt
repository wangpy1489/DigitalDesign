// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "11/08/2018 23:49:22"
                                                                                
// Verilog Test Bench template for design : Muti-fuctionWatch
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 10 ns/ 1 ps
module Muti-fuctionWatch_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg CLOCK_50;
reg [2:0] KEY;
// wires                                               
wire [6:0]  hex0;
wire [6:0]  hex1;
wire [6:0]  hex2;
wire [6:0]  hex3;
wire [6:0]  hex4;
wire [6:0]  hex5;
wire LED0;
wire LED1;
wire LED2;
wire LED3;

// assign statements (if any)                          
Muti-fuctionWatch i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.hex3(hex3),
	.hex4(hex4),
	.hex5(hex5),
	.KEY(KEY),
	.LED0(LED0),
	.LED1(LED1),
	.LED2(LED2),
	.LED3(LED3)
);
initial
	begin
		CLOCK_50 = 0;
		while (1)
			#10 CLOCK_50 = ~CLOCK_50;
	end
initial
	begin
		KEY[0] = 0;
	while (1)
		#10 KEY[0] = 1;
	end
initial
	begin
		$display($time,"CLOCK_50M=%d RESET=%d LED =%d",
		CLOCK_50, KEY[0], LED);
	end
endmodule
//initial                                                
//begin                                                  
// code that executes only once                        
// insert code here --> begin                          
                                                       
// --> end                                             
//$display("Running testbench");                       
//end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

